
ROOT    = .
SDKROOT = $(ROOT)/..

# toolchain settings
include $(SDKROOT)/config/${ARM_CROSS_TOOL}.CFG
# SOC specific rules
include $(SDKROOT)/bsp/$(BSP_PATH)/include/run_addr.cfg

# directories for find header files
INCLUDES        =   -I$(ROOT)                               		\
                    -I$(SDKROOT)/config                     		\
					-I$(SDKROOT)/bsp								\
                    -I$(SDKROOT)/bsp/$(BSP_PATH)					\
                    -I$(SDKROOT)/bsp/$(BSP_PATH)/include            \
					-I$(SDKROOT)/bsp/$(BSP_PATH)/include/interinc   \
					-I$(SDKROOT)/bsp/$(BSP_PATH)/common				\
					-I$(SDKROOT)/bsp/$(BSP_PATH)/init_dram			\
					-I$(SDKROOT)/bsp/$(BSP_PATH)/uart				\
					-I$(SDKROOT)/bsp/$(BSP_PATH)/gpio

ifeq ($(STORAGE_MEDIA_TYPE), STORAGE_SPINOR)
	INCLUDES        +=	-I$(SDKROOT)/bsp/$(BSP_PATH)/spi
endif

# NAND boot0 settings
ifeq ($(STORAGE_MEDIA_TYPE), STORAGE_NAND)
STORAGE_TYPE    = -I$(SDKROOT)/config/storage_media_cfg/nand
SRCDIRS         = $(shell find $(ROOT)/load_boot1_from_nand -maxdepth 5 -type d)	\
				  $(shell find $(SDKROOT)/bsp/$(BSP_PATH)/nand -maxdepth 5 -type d)
TARGET      	= $(ROOT)/boot0_nand_$(ARCH).bin
LOCALTARGET 	= __boot0_nand_$(ARCH).$(OUT_EXT)
else

# SDMMC boot0 settings
ifeq ($(STORAGE_MEDIA_TYPE), STORAGE_SDMMC)
STORAGE_TYPE    = -I$(SDKROOT)/config/storage_media_cfg/sdcard
SRCDIRS         = $(shell find $(ROOT)/load_boot1_from_sdmmc -maxdepth 3 -type d)
TARGET      	= $(ROOT)/boot0_sdcard_$(ARCH).bin
LOCALTARGET 	= __boot0_sdmmc_$(ARCH).$(OUT_EXT)
else

# SPI NOR boot0 settings
ifeq ($(STORAGE_MEDIA_TYPE), STORAGE_SPINOR)
STORAGE_TYPE    = -I$(SDKROOT)/config/storage_media_cfg/spinor
SRCDIRS         = $(shell find $(ROOT)/load_boot1_from_spinor -maxdepth 3 -type d) \
				  $(shell find $(SDKROOT)/bsp/$(BSP_PATH)/spi -maxdepth 5 -type d)
TARGET      	= $(ROOT)/boot0_spinor_$(ARCH).bin
LOCALTARGET 	= __boot0_spinor_$(ARCH).$(OUT_EXT)
else

error:
	$(error STORAGE_MEDIA_TYPE is not set or invalid!!!)
endif

endif

endif



# intermediate file
TMPTARGET   = $(ROOT)/boot0_origin.bin

# source directories
SRCDIRS     :=  $(SRCDIRS)                                  \
            $(ROOT)                                         \
            $(shell find $(ROOT)/drv -maxdepth 3 -type d)   \
            $(shell find $(ROOT)/lib -maxdepth 3 -type d)   \
            $(shell find $(ROOT)/sys_op -maxdepth 3 -type d)\
			$(SDKROOT)/bsp/$(BSP_PATH)/common				\
			$(SDKROOT)/bsp/$(BSP_PATH)/init_dram			\
			$(SDKROOT)/bsp/$(BSP_PATH)/uart 				\
			$(SDKROOT)/bsp/$(BSP_PATH)/gpio

INCLUDES    :=  $(INCLUDES)                         \
				$(STORAGE_TYPE)						\
                $(foreach dir,$(SRCDIRS),-I$(dir))


ifeq ($(FLAGS) , SUN7I_HOMLET)
CFLAGS	   :=$(CFLAGS) -D$(FLAGS)
endif
ASFLAGS    := $(ASFLAGS) $(INCLUDES)

# ARMCC specific settings
ifeq ($(CROSSTOOL), ARMRVDS)

LINK_SCT   = --scatter=$(ROOT)/config/config.sct
CFLAGS     := $(CFLAGS) -O2 --debug
CFLAGS     := $(CFLAGS) $(INCLUDES)

ASFLAGS    := $(ASFLAGS) --debug --keep
LDFLAGS    := $(LDFLAGS) --pd="-DRUN_ADDR=$(BOOT0_RUN_ADDR)" $(LINK_SCT)
ELF2BINFLAGS := $(ELF2BINFLAGS) --bin --output

SRCCS=$(foreach dir,$(SRCDIRS),$(wildcard $(dir)/*.c))
SRCSS=$(foreach dir,$(SRCDIRS),$(wildcard $(dir)/*.s))
OBJS=$(SRCCS:.c=.o) $(SRCSS:.s=.o)

# rules for build
%.o: %.c
	@$(CC) $(CFLAGS) $(INCLUDES) -c "$<" -o "$@";

%.o: %.s
	@$(AS) $(ASFLAGS) $(INCLUDES) -c "$<" -o "$@";

else

# GCC specific settings
ifeq ($(CROSSTOOL), ARMGCC)

LIBC_TYPE ?= nano
LIBGCC=$(shell $(CC) $(CFLAGS_COMMON) "-print-file-name=libgcc.a")
LIBNOSYS=$(shell $(CC) $(CFLAGS_COMMON) "-print-file-name=libnosys.a")
LIBC_NANO=$(shell $(CC) $(CFLAGS_COMMON) "-print-file-name=libc_nano.a")
LIBC=$(shell $(CC) $(CFLAGS_COMMON) "-print-file-name=libc.a")
LIBM=$(shell $(CC) $(CFLAGS_COMMON) "-print-file-name=libm.a")

ifeq (nano,$(LIBC_TYPE))
    STDLIBS="$(LIBC_NANO)" "$(LIBM)" "$(LIBGCC)" "$(LIBNOSYS)"
else
    STDLIBS="$(LIBC)" "$(LIBM)" "$(LIBGCC)"
endif

LIBS       := $(STDLIBS)

LDSCRIPT   := $(ROOT)/config/config.ld

CFLAGS     := $(CFLAGS) -Os -g $(INCLUDES)
LDFLAGS    := $(LDFLAGS) --entry=_start -T$(LDSCRIPT)
ELF2BINFLAGS:= $(ELF2BINFLAGS) -O binary


SRCCS=$(foreach dir,$(SRCDIRS),$(wildcard $(dir)/*.c))
SRCSS=$(foreach dir,$(SRCDIRS),$(wildcard $(dir)/*.gas))
OBJS=$(SRCCS:.c=.o) $(SRCSS:.gas=.o)

# rules for build
%.o: %.c
	@$(CC) $(CFLAGS) $(INCLUDES) -c "$<" -o "$@";

%.o: %.gas
	@$(AS) $(ASFLAGS) $(INCLUDES) -c "$<" -o "$@";

else

error:
	$(error CROSSTOOL is not set or invalid!!!)

endif

endif

