

# default toolchain
CROSSTOOL ?= ARMGCC

# path to lichee_tools
WORKTOOLS       = $(SDKROOT)/../../lichee_tools

ifeq ($(CROSSTOOL), ARMRVDS)

# RVDS toolchain

# C compiler executable
CC          = @armcc
# C compiler flags
CFLAGS      = --cpu=Cortex-A7

#C++ compiler executable & flags
CXX         = @armcpp
CXXFLAGS    = --cpu=Cortex-A7 --cpp --no_exceptions

# assembler compiler executable
AS          = @armasm
# assembler compiler flags
ASFLAGS      = --cpu=Cortex-A7

# linker executable
LINK        = armlink
# linker flags
LDFLAGS     = --noremove

# archiver executable
AR          = armar
# archiver flags
ARFLAGS     = -r

# convert to binary executable
ELF2BIN     = fromelf
# convert to binary flags
ELF2BINFLAGS=

OUT_EXT     = axf

else


ifeq ($(CROSSTOOL), ARMGCC)

#GNU ARM toolchain, tested with arm-none-eabi

# CROSS_COMPILE toolchain prefix
CROSS_COMPILE ?= arm-none-eabi-

# C compiler executable
CC          = $(CROSS_COMPILE)gcc
# C compiler flags
CFLAGS      = -mcpu=cortex-a7 -Wall -mfloat-abi=soft -ffunction-sections -fdata-sections

# assembler compiler executable
AS          = $(CROSS_COMPILE)as
# assembler compiler flags
ASFLAGS     = -mcpu=cortex-a7 -mfloat-abi=soft

# linker executable
LINK        = $(CROSS_COMPILE)ld
# linker flags
LDFLAGS     = --gc-sections --nostdlib

# convert to binary executable
ELF2BIN     = $(CROSS_COMPILE)objcopy
# convert to binary flags
ELF2BINFLAGS=

OUT_EXT     = elf

else

error:
	$(error CROSSTOOL configuration is invalid!!!)

endif


endif
